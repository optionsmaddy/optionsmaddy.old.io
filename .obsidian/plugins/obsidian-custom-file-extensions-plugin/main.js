/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CustomFileExtensions
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  additionalFileTypes: {
    "markdown": [
      "",
      "txt",
      "html",
      "js",
      "css",
      "ts",
      "jsx",
      "tsx",
      "yaml",
      "yml",
      "sass",
      "scss"
    ]
  },
  currentValueIsInvalidJson: false
};
var CustomFileExtensions = class extends import_obsidian.Plugin {
  get settings() {
    return this._settings;
  }
  async onload() {
    super.onload();
    await this.loadSettings();
    this.addSettingTab(new CustomFileExtensionsSettingTab(this.app, this));
    this._apply(this.settings.additionalFileTypes);
  }
  onunload() {
    this._unapply(this._settings.additionalFileTypes);
    try {
      this.registerExtensions([".md"], "markdown");
    } catch (e) {
    }
  }
  async loadSettings() {
    this._settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async updateSettings(newSettings) {
    this._unapply(this._settings.additionalFileTypes);
    this._settings = newSettings;
    await this.saveData(this.settings);
    this._apply(this.settings.additionalFileTypes);
  }
  _apply(extensionsByViewType) {
    for (const view in extensionsByViewType) {
      for (const fileType of this.settings.additionalFileTypes[view]) {
        this.registerExtensions([fileType], view);
      }
    }
  }
  _unapply(extensionsByViewType) {
    for (const view of Object.values(extensionsByViewType).flat()) {
      try {
        this.app.viewRegistry.unregisterExtensions([view]);
      } catch (e) {
        console.log("ERROR");
      }
    }
  }
};
var CustomFileExtensionsSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this._defaults = void 0;
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Custom File Extensions Settings" });
    const settings = new import_obsidian.Setting(containerEl).setName("Config").setDesc("Valid entry is a JSON object with properties named after the desired view, containing the file types to assign to that view. EX: " + DEFAULT_SETTINGS.additionalFileTypes).addTextArea((text) => {
      text = text.setPlaceholder(JSON.stringify(DEFAULT_SETTINGS.additionalFileTypes)).setValue(JSON.stringify(this.plugin.settings.additionalFileTypes)).onChange(async (value) => {
        let parsed = null;
        try {
          parsed = JSON.parse(value);
          this.updateErrorState(text, false);
        } catch (e) {
          this.updateErrorState(text, true);
          return;
        }
        this.plugin.settings.additionalFileTypes = parsed;
        await this.plugin.updateSettings(this.plugin.settings);
      });
      return text;
    });
  }
  updateErrorState(text, to) {
    if (this.plugin.settings.currentValueIsInvalidJson !== to) {
      this.plugin.settings.currentValueIsInvalidJson = to;
      if (this.plugin.settings.currentValueIsInvalidJson) {
        if (!this._defaults) {
          this._defaults = {
            color: text.inputEl.style.color,
            borderColor: text.inputEl.style.borderColor,
            borderWidth: text.inputEl.style.borderWidth
          };
        }
        text.inputEl.style.color = "var(--text-error)";
        text.inputEl.style.borderColor = "var(--background-modifier-error-rgb)";
        text.inputEl.style.borderWidth = "3px";
      } else if (this._defaults) {
        text.inputEl.style.color = this._defaults.color;
        text.inputEl.style.borderColor = this._defaults.borderColor;
        text.inputEl.style.borderWidth = this._defaults.borderWidth;
      }
    }
  }
};
